# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = ..

# Where to find user code.
USER_DIR = .

#CXX = arm-poky-linux-gnueabi-g++ 
CXX = g++ 

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS := -isystem $(GTEST_DIR)/include
CPPFLAGS += -c -g -fprofile-arcs -ftest-coverage -fPIC -O0 -fpermissive 

# Flags passed to the C++ compiler.
CXXFLAGS := -g -Wextra -pthread -fpermissive


LIBS := -ldbus-glib-1 -ldbus-1 -lgobject-2.0 -lglib-2.0 -lpthread -lrt

# created to the list.
TESTS = uart_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS := $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

INCLUDES := -I/usr/include/dbus-1.0 \
				 -I/usr/lib/glib-2.0/include/ \
            	 -I/usr/include/glib-2.0/ \

INCLUDES+=$(shell pkg-config glib-2.0 --cflags --libs)
INCLUDES+=$(shell pkg-config dbus-1 --cflags --libs)

#GTEST_HEADERS+=$(shell pkg-config glib-2.0 --cflags --libs)
#GTEST_HEADERS+=$(shell pkg-config dbus-1 --cflags --libs)

#add by rocky
FILES = $(foreach d, $(USER_DIR), $(wildcard $(d)/*.cpp))
OBJS = $(patsubst %.cpp, %.o, $(FILES))


# House-keeping build targets.

all : $(TESTS)

.PHONY:clean
clean:
	#rm -f $(TESTS) gtest.a gtest_main.a *.o
	rm -f $(TESTS) *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

gtest-all.o : $(GTEST_SRCS)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc


gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^ 

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


%.o : %.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LIBS) $(INCLUDES) -c $< -o $@ 

$(TESTS) : $(OBJS) gtest_main.a
	$(CXX) $^ $(LIBS) -Wall -fPIC -o $@ -lgcov 

